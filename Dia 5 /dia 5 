-- ####################################
-- ### DIA #5 - Consultas - Funciones #
-- ####################################

use dia3;

## clientes - no han realizado pagos
select distinct cliente.nombre_cliente, cliente.codigo_cliente
from cliente
where cliente.codigo_cliente not in(select pago.codigo_cliente from pago);

## clientes - no han realizado pedidos
select distinct cliente.nombre_cliente, cliente.codigo_cliente
from cliente
where cliente.codigo_cliente not in(select pedido.codigo_cliente from pedido);

## clientes - no han realizado pagos - ni pedidos
select distinct cliente.nombre_cliente, cliente.codigo_cliente
from cliente
where cliente.codigo_cliente not in(select pedido.codigo_cliente from pedido) and cliente.codigo_cliente not in (select pago.codigo_cliente from pago);

##  empleados - sin oficina asociada (no hay)
select empleado.codigo_empleado, empleado.nombre
from empleado
where empleado.codigo_oficina not in (select oficina.codigo_oficina from oficina);

## empleados - sin cliente asociado
select empleado.codigo_empleado, empleado.nombre
from empleado
where empleado.codigo_empleado not in (select cliente.codigo_empleado_rep_ventas from cliente);

## empleados - sin cliente asociado - datos de la oficina donde trabajan
select empleado.codigo_empleado, empleado.nombre, oficina.codigo_oficina, oficina.ciudad, oficina.pais, oficina.telefono
from empleado
inner join oficina on empleado.codigo_oficina = oficina.codigo_oficina
where empleado.codigo_empleado not in (select cliente.codigo_empleado_rep_ventas from cliente);

## empleados - sin oficina asociada - sin cliente asociado (no hay)
select empleado.codigo_empleado, empleado.nombre
from empleado
where empleado.codigo_oficina not in (select oficina.codigo_oficina from oficina) and empleado.codigo_empleado not in (select cliente.codigo_empleado_rep_ventas from cliente);

## productos - nunca han aparecido en un pedido
select producto.codigo_producto, producto.nombre, producto.gama
from producto
where producto.codigo_producto not in (select detalle_pedido.codigo_producto from detalle_pedido);

## productos - nunca han aparecido en un pedido - nombre - descripción - imagen del producto
select producto.codigo_producto, producto.nombre, producto.gama, producto.descripcion, gp.imagen
from producto
inner join gama_producto gp on producto.gama = gp.gama
where producto.codigo_producto not in (select detalle_pedido.codigo_producto from detalle_pedido);

## oficinas - no trabajan empleados_rep_ventas de clientes que han hecho compras de productos de la gama frutales
select oficina.codigo_oficina, oficina.pais, oficina.telefono, producto.gama
from producto
inner join detalle_pedido on producto.codigo_producto = detalle_pedido.codigo_producto
inner join pedido on detalle_pedido.codigo_pedido = pedido.codigo_pedido
inner join cliente on pedido.codigo_cliente = cliente.codigo_cliente
inner join empleado on cliente.codigo_empleado_rep_ventas = empleado.codigo_empleado
inner join oficina on empleado.codigo_oficina = oficina.codigo_oficina
where producto.gama != 'Frutales';

## clientes que han realizado algun pedido pero ningun pago
select cliente.nombre_cliente
from pedido
inner join cliente on pedido.codigo_cliente = cliente.codigo_cliente
where cliente.codigo_cliente not in(select pago.codigo_cliente from pago);

## empleados que no tienen clientes asocicados y el nombre de su jefe asociado
select emp.nombre as NombreEmpleado, jef.nombre as NombreJefe
from empleado emp
inner join empleado jef on emp.codigo_jefe = jef.codigo_empleado
where emp.codigo_empleado not in (select cliente.codigo_empleado_rep_ventas from cliente);

## cuantos empleados hay en la empresa
select count(*)
from empleado;

## cuantos clientes tiene cada país
select pais, count(*) as numero_clientes
from cliente
group by pais;

## pago medio año 2009
select avg(total)
from pago
where year(fecha_pago) = 2009;

## cuantos pedidos hay en cada estado - resultado de forma descendente por el numero de pedidos
select estado, count(*) as numero_pedidos
from pedido
group by estado
order by numero_pedidos Desc;

## precio de venta del producto mas caro y mas barato en una consulta
select max(precio_venta) , min(precio_venta)
from producto;

## numero de clientes en la empresa
select count(*)
from cliente;

## clientes - domicilio en madrid
select count(*)
from cliente
where ciudad = 'Madrid';

## clientes - cada una de las ciudades que empiezan por m
select ciudad, count(*) as numero_clientes
from cliente
where ciudad like 'M%'
group by ciudad;

## nombre de representantes de ventas y numero de clientes que atiende cada uno
select empleado.nombre, count(*) as numero_clientes
from empleado
left join cliente on empleado.codigo_empleado = cliente.codigo_empleado_rep_ventas
group by empleado.nombre;

## numero de clientes que no tiene representante de ventas
select count(*)
from cliente
where codigo_empleado_rep_ventas = null;

## fecha primer y ultimo pago realizado por cada uno de los clientes - mostrar nombre y apellidos de cada cliente (los clientes no tienen registrado apellido)
select cliente.nombre_cliente, min(pago.fecha_pago) as primer_pago, max(pago.fecha_pago) as ultimo_pago
from cliente
inner join pago on cliente.codigo_cliente = pago.codigo_cliente
group by cliente.nombre_cliente;

## numero de productos diferentes en cada uno de los pedidos
select detalle_pedido.codigo_pedido, count(distinct detalle_pedido.codigo_producto) as productos_diferentes
from detalle_pedido
group by detalle_pedido.codigo_pedido;

## suma de la cantidad total de todos los productos que aparecen en cada uno de los pedidos
select codigo_pedido, sum(cantidad) as cantidad_total
from detalle_pedido
group by codigo_pedido;

## Devuelve un listado de los 20 productos más vendidos - el número total de unidades que se han vendido de cada uno - El listado deberá estar ordenado por el número total de unidades vendidas
select detalle_pedido.codigo_producto, producto.nombre as nombre_producto, sum(detalle_pedido.cantidad) as total_unidades_vendidas
from detalle_pedido
inner join producto on detalle_pedido.codigo_producto = producto.codigo_producto
group by detalle_pedido.codigo_producto, producto.nombre
ORDER BY total_unidades_vendidas desc limit 20;

## La facturación que ha tenido la empresa en toda la historia, indicando la base imponible, el IVA y el total facturado. La base imponible se calcula sumando el coste del producto por el número de unidades vendidas de la tabla detalle_pedido. El IVA es el 21 % de la base imponible, y el total la suma de los dos campos anteriores.
select sum(dp.cantidad * p.precio_venta) as base_imponible, sum(dp.cantidad * p.precio_venta) * 0.21 as iva, sum(dp.cantidad * p.precio_venta) * 1.21 as total_facturado
from detalle_pedido dp
inner join producto p on dp.codigo_producto = p.codigo_producto;

## la misma informacion anterior pero agrupada por codigo_producto
select dp.codigo_producto, sum(dp.cantidad * p.precio_venta) as base_imponible, sum(dp.cantidad * p.precio_venta) * 0.21 as iva, sum(dp.cantidad * p.precio_venta) * 1.21 as total_facturado
from detalle_pedido dp
inner join producto p on dp.codigo_producto = p.codigo_producto
group by dp.codigo_producto;

--1.4.8

--Devuelve el nombre del cliente con mayor límite de crédito.

SELECT nombre_cliente 
FROM cliente 
WHERE limite_credito = (SELECT MAX(limite_credito) FROM cliente);


--Devuelve el nombre del producto que tenga el precio de
--venta más caro.


SELECT nombre
FROM producto 
WHERE precio_venta =  (SELECT MAX(precio_venta) FROM producto);

-- Devuelve el nombre del producto del que se han vendido
--más unidades. (Tenga en cuenta que tendrá que calcular
--cuál es el número total de unidades que se han vendido de
-- cada producto a partir de los datos de la
--tabla detalle_pedido)

SELECT nombre;
FROM producto;
WHERE codigo_producto =(
    SELECT codigo_producto
    FROM detalle_pedido
    GROUP BY codigo_producto 
    ORDER BY SUM(cantidad) DESC 
    LIMIT 1 
);


-- Los clientes cuyo límite de crédito sea mayor que los pagos
--que haya realizado. (Sin utilizar INNER JOIN).

SELECT nombre_cliente;
FROM cliente c;
WHERE limite_credito > (SELECT COALESCE(SUM(total), 0)
                        FROM pago p 
                        WHERE p.codigo_cliente = c.codigo_cliente);

-- Devuelve el producto que más unidades tiene en stock


SELECT nombre;
FROM producto; 
WHERE cantidad_en_stock = (SELECT MAX(cantidad_en_stock) FROM producto);

--Devuelve el producto que menos unidades tiene en stock


SELECT nombre;
FROM producto;
WHERE cantidad_en_stock = (SELECT MIN(cantidad_en_stock) FROM producto);

--Devuelve el nombre, los apellidos y el email de los empleados que están a cargo de Alberto Soria


SELECT nombre, apellido1, apellido2, email 
FROM empleado 
WHERE codigo_jefe = (SELECT codigo_empleado
                    FROM empleado
                    WHERE nombre = 'Alberto'
                    AND apellido1 = 'Soria');
--1.4.8.2 

-- Devuelve el nombre del cliente con mayor límite de crédito

SELECT nombre_cliente;
FROM cliente;
WHERE limite_credito = ANY (
    SELECT MAX(limite_credito)
    FROM cliente;
)

-- Devuelve el nombre del producto que tenga el precio de venta más caro

SELECT nombre;
FROM producto;
WHERE precio_venta >= ALL (SELECT precio_venta FROM producto);

-- Devuelve el producto que menos unidades tiene en stock


SELECT nombre;
FROM producto;
WHERE cantidad_en_stock <= ALL (SELECT cantidad_en_stock FROM producto);

-- 1.4.8.3 

-- Devuelve el nombre, apellido1 y cargo de los empleados que no representan a ningun cliente.

SELECT e.nombre, e.apellido1, e.puesto;
FROM empleado e;
WHERE e.codigo_empleado NOT IN (
    SELECT c.codigo_empleado_rep_ventas
    FROM cliente c 
);

-- Devuelve un listado que muestre solamente los clientes que no han realizado ningún pago

SELECT c.nombre_cliente, c.nombre_contacto, c.apellido_contacto, c.telefono;
FROM cliente c;
WHERE c.codigo_cliente NOT IN (
    SELECT p.codigo_cliente
    FROM pago p 
);

-- Devuelve un listado que muestre solamente los clientes que si han realizado algún pago


SELECT c.nombre_cliente, c.nombre_contacto, c.apellido_contacto, c.telefono;
FROM cliente c;
WHERE c.codigo_cliente IN (
    SELECT p.codigo_cliente 
    FROM pago p
);

-- Devuelve un listado de los productos que nunca han aparecido en un pedido


SELECT p.codigo_producto, p.nombre;
FROM producto p; 
WHERE p.codigo_producto NOT IN (
    SELECT dp.codigo_producto 
    FROM detalle_pedido dp
);

-- Devuelve el nombre, apellidos, puesto y telefono de la oficina de aquellos empleados que no sean representante de ventas
-- de ningun cliente

SELECT e.nombre, e.apellido1, e.apellido2, e.puesto, o.telefono;
FROM empleado e;
JOIN oficina o ON e.codigo_oficina = o.codigo_oficina;
WHERE e.codigo_empleado NOT IN (
    SELECT c.codigo_empleado_rep_ventas;
    FROM cliente c;
)

--Devuelve las oficinas donde no trabajan ninguno de los empleados que hayan sido los representantes de ventas de algun cliente 
--que haya realizado la compra de algún producto de la gama frutales


SELECT o.*
FROM oficina o 
WHERE o.codigo_oficina NOT IN (
    SELECT DISTINCT e.codigo_oficina 
    FROM empleado e
    WHERE e.codigo_empleado IN (
        SELECT DISTINCT c.codigo_empleado_rep_ventas
        FROM cliente c 
        WHERE c.codigo_cliente IN (
            SELECT p.codigo_cliente
            FROM pedido p 
            JOIN detalle_pedido dp ON p.codigo_pedido = dp.codigo_pedido
            JOIN producto pr ON dp.codigo_producto = pr.codigo_producto
            WHERE pr.gama = 'frutales'
        )
    )
);

-- Devuelve un listado con los clientes que han realizado algun pedido pero no han realizado ningún pago


SELECT c.nombre_cliente, c.nombre_contacto, c.apellido_contacto, c.telefono;
FROM cliente c;
WHERE c.codigo_cliente IN (
    SELECT p.codigo_cliente 
    FROM pedido p 
)
AND c.codigo_cliente NOT IN (
    SELECT pa.codigo_cliente 
    FROM pago pa 
);

-- 1.4.8.4

-- Devuelve un listado que mueste solamente los clientes que no han realizado ningún pago

SELECT c.nombre_cliente;
FROM cliente c;
WHERE not exists (
    SELECT 1
    FROM pago p
    WHERE p.codigo_cliente = c.codigo_cliente
)
ORDER BY c.nombre_cliente;

-- Devuelve un listado que muestre solamente los clientes que si han realizado algún pago


SELECT c.nombre_cliente;
FROM cliente c;
WHERE exists (
    SELECT 1
    FROM pago p
    WHERE p.codigo_cliente = c.codigo_cliente
)

ORDER BY c.nombre_cliente;

--Devuelve un listado de los productos que nunca han aparecido en un pedido


SELECT p.nombre;
FROM producto p;
WHERE NOT EXISTS (
    SELECT 1
    FROM detalle_pedido dp
    WHERE dp.codigo_producto = p.codigo_producto
)

ORDER BY p.nombre;

--  Devuelve un listado de los productos que han aparecido en un pedido alguna vez

SELECT p.codigo_producto, p.nombre;
FROM producto p;
WHERE EXISTS (
    SELECT 1
    FROM detalle_pedido dp 
    WHERE dp.codigo_producto = p.codigo_producto
);

-- 1.4.9


-- Devuelve el listado de clientes indicando el nombre del cliente y cuantos pedidos ha realizado. 
-- tenga en cuenta que pueden existir clientes que no han realizado ningún pedido


SELECT c.nombre_cliente COUNT(p.codigo_pedido) AS num_pedidos;
FROM cliente c;
LEFT JOIN pedido p ON c.codigo_cliente = p.codigo_pedido;
GROUP BY c.nombre_cliente;

-- Devuelve un listado con los nombres de los clientes y el total pagado por cada uno de ellos. 
-- Tenga en cuenta que pueden existir clientes que no han realizado ningún pago

SELECT c.nombre_cliente COALESCE(SUM(p.total), 0) AS total_pagado;
FROM cliente c;
LEFT JOIN pago p ON c.codigo_cliente = p.codigo_cliente;
GROUP BY c.nombre_cliente;
-- Devuelve el nombre de los clientes que hayan hecho pedidos en 2008 ordenados alfabeticamente de menor a mayor


SELECT DISTINCT c.nombre_cliente;
FROM cliente c;
JOIN pedido p ON c.codigo_cliente = p.codigo_pedido;
WHERE YEAR (p.fecha_pedido) = 2008;
ORDER BY c.nombre_cliente ASC;

--Devuelve el nombre del cliente, el nombre y el primer apellido de su representante de ventas y 
--el numero de telefono de la oficina del representante de ventas de aquellos clientes que no hayan realizado ningún pago

SELECT c.nombre_cliente, e.nombre AS nombre_representante, e.apellido1 AS apellido_representante, o.telefono AS telefono_oficina;
FROM cliente c;
JOIN empleado e ON c.codigo_empleado_rep_ventas = e.codigo_empleado;
JOIN oficina o ON e.codigo_oficina = o.codigo_oficina;
LEFT JOIN pago p ON c.codigo_cliente = p.codigo_cliente;
WHERE p.codigo_cliente IS NULL
GROUP BY c.codigo_cliente;
GROUP BY c.nombre_cliente;

--Devuelve el listado de clientes donde aparezca el nombre del cliente, el nombre y el primer apellido de su representante de ventas 
--y la ciudad donde está su oficina

SELECT c.nombre_cliente, e.nombre AS nombre_representante, e.apellido1 AS apellido_representante, o.ciudad;
FROM cliente c;
JOIN empleado e ON c.codigo_empleado_rep_ventas = e.codigo_empleado;
JOIN oficina o ON e.codigo_oficina = o.codigo_oficina;
ORDER BY c.nombre_cliente;


--Devuelve el nombre, apellidos, puesto y telefono de la oficina de aquellos empleados 
--que no sean representante de ventas de ningun cliente

SELECT e.nombre, e.apellido1, e.apellido2, e.puesto, o.telefono;
FROM empleado e;
JOIN oficina o ON e.codigo_oficina = o.codigo_oficina;
LEFT JOIN cliente c ON e.codigo_empleado = c.codigo_empleado_rep_ventas;
WHERE c.codigo_empleado_rep_ventas IS NULL;
ORDER BY e.nombre;

-- Devuelve un listado indicando todas las ciudades donde hay oficinas y el numero de empleados que tiene

SELECT o.ciudad, COUNT(e.codigo_empleado) AS num_empleados;
FROM oficina o;
JOIN empleado e ON o.codigo_oficina = e.codigo_oficina;
GROUP BY o.ciudad;
ORDER BY o.ciudad;

-- Desarrollado por Brayan Yesid Lindarte Anaya / ID 10.xx.xxx.xxx